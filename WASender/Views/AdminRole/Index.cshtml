
@{
    ViewData["Title"] = "Admin Roles";
    var roles = ViewBag.Roles as List<WASender.Models.Role>;

    Layout = "~/Views/Shared/_UserLayout.cshtml";
    ViewData["Buttons"] = new List<dynamic>
    {
        new { name = "Create a Role", url = Url.Action("Create", "AdminRole"), is_button = false, components = "" }
    };
}
@await Html.PartialAsync("_HeaderSection")

<div class="row">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-body">
                <div class="row mb-30">
                    <div class="col-lg-6">
                        <h4>Roles</h4>
                    </div>
                    
                </div>

                <br />
                <div class="table-responsive custom-table">
                    <table class="table">
                        <thead>
                            <tr>
                                <th width="10%">Name</th>
                                <th width="80%">Permissions</th>
                                <th width="10%" class="text-right">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var role in roles)
                            {
                                <tr>
                                    <td>@role.Name</td>
                                    <td>
    @if (role.Permissions != null && role.Permissions.Any())
    {
        foreach (var perm in role.Permissions)
        {
            <span class="badge badge-primary mr-1 mb-2">
                @perm.Name
            </span>
        }
    }
    else
    {
        <span class="text-muted">No permissions</span>
    }
</td>

                                    <td class="text-right">
                                       <a href="#" data-url="@Url.Action("Delete", "AdminRole", new { id = role.Id })"
   class="btn btn-neutral con btn-sm delete-confirm">
    Delete
</a>

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="@Url.Content("~/assets/vendor/select2/dist/js/select2.min.js")"></script>
    <script src="@Url.Content("~/assets/js/pages/user/contact.js")"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
                                      document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".delete-confirm").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.preventDefault();
                     let deleteUrl = this.getAttribute("data-url");

                    if (!deleteUrl) {
                        Swal.fire("Error!", "Invalid delete URL.", "error");
                        return;
                    }

                    Swal.fire({
                        title: "Are you sure?",
                        text: "You want to delete this member?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, delete it!"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(deleteUrl, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "X-Requested-With": "XMLHttpRequest"
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire("Deleted!", data.message, "success").then(() => location.reload());
                                } else {
                                    Swal.fire("Error!", data.message, "error");
                                }
                            })
                            .catch(error => Swal.fire("Error!", "Failed to delete: " + error.message, "error"));
                        }
                    });
                }); 
            });
        });

    </script>
}